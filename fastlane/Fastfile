# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.102.0"

libraryFilePath = "#{ENV['AWL_LIB_SRC']}/Scripts/WL.rb"
if File.exists?(libraryFilePath)
   import libraryFilePath
else
   import "#{ENV['PWD']}/Vendor/WL/Scripts/fastlane.rb"
end

XCodeProjectFilePath = "#{ENV['PWD']}/CARingBuffer.xcodeproj"
XCodeProjectSchema = "Developer: Build Everything"

desc "Builds project."
lane :build do
   XcodeBuilder.new(XCodeProjectFilePath).build(XCodeProjectSchema)
end

desc "Cleans project."
lane :clean do
   XcodeBuilder.new(XCodeProjectFilePath).clean(XCodeProjectSchema)
end

desc "Builds when under CI (i.e. Travis)."
lane :ci do
   XcodeBuilder.new(XCodeProjectFilePath).ci("Developer: Analyze Performance")
   XcodeBuilder.new(XCodeProjectFilePath).ci("Demo: CAPlayThrough")
   XcodeBuilder.new(XCodeProjectFilePath).test("Logic Tests: Swift")
end

desc "Runs logic tests."
lane :test do
  XcodeBuilder.new(XCodeProjectFilePath).test("Logic Tests: Swift")
  XcodeBuilder.new(XCodeProjectFilePath).test("Logic Tests: C++")
end

desc "Deploy release to GitHub."
lane :deploy do
   releaseName = File.read("#{ENV['PWD']}/fastlane/ReleaseName.txt").strip
   releaseDescription = File.read("#{ENV['PWD']}/fastlane/ReleaseNotes.txt").strip
   github_release = set_github_release(
     repository_name: "vgorloff/CARingBuffer", api_token: ENV['AWL_GITHUB_TOKEN'], name: releaseName, tag_name: last_git_tag,
     description: releaseDescription, commitish: "master"
   )
end

desc "Autocorrect source code."
lane :autocorrect do
   sh "swiftformat "\
   "--allman false --binarygrouping none --commas inline --comments indent --decimalgrouping none --empty void "\
   "--exponentcase lowercase --header ignore --hexgrouping none --hexliteralcase uppercase --ifdef noindent --indent 3 --insertlines enabled "\
   "--linebreaks lf --octalgrouping none --patternlet inline --ranges spaced --removelines true --semicolons inline --self remove "\
   "--stripunusedargs unnamed-only --trimwhitespace always --wraparguments disabled --wrapelements disabled "\
   "\"#{ENV['PWD']}\""
   sh "swiftlint autocorrect --path #{ENV['PWD']}"
   ImportsOrganizer.new().process(ENV['PWD'])
end

desc "Verify source code."
lane :verify do
   `swiftlint lint --quiet --path #{ENV['PWD']}`
   puts FileHeaderChecker.new(["WaveLabs"]).analyse("#{ENV['PWD']}/Sources")
   puts FileHeaderChecker.new(["WaveLabs"]).analyse("#{ENV['PWD']}/Tests")
   puts FileHeaderChecker.new(["WaveLabs"]).analyse("#{ENV['PWD']}/Vendor/WL")
end

desc "Unsync source code."
lane :unsync do
   srcDirPath = ENV['AWL_LIB_SRC']
   if Dir.exists?(srcDirPath)
      projectFilePath = "#{ENV['PWD']}/CARingBuffer.xcodeproj"
      fastlane_require 'xcodeproj'
      project = Xcodeproj::Project.open(projectFilePath)
      vendorGroup = project.groups.select { |g| g.path == "Vendor" }.first.groups.select { |g| g.name == "WL" }.first
      vendorGroup.source_tree = "WL"
      vendorGroup.path = nil
      project.save()
   end
end

desc "Sync source code."
lane :sync do
   srcDirPath = ENV['AWL_LIB_SRC']
   dstDirPath = "#{ENV['PWD']}/Vendor/WL"
   if Dir.exists?(srcDirPath)
      projectFilePath = "#{ENV['PWD']}/CARingBuffer.xcodeproj"
      fastlane_require 'xcodeproj'
      project = Xcodeproj::Project.open(projectFilePath)
      vendorGroup = project.groups.select { |g| g.path == "Vendor" }.first.groups.select { |g| g.name == "WL" }.first
      swiftFiles = vendorGroup.recursive_children.select { |c| c.respond_to?(:real_path) }.select { |f| f.real_path.to_s.end_with?(".swift") }
      swiftFiles = swiftFiles.map { |f| f.real_path.to_s.gsub("${WL}", ENV['AWL_LIB_SRC']) }
      scriptFiles = Dir["#{srcDirPath}/Scripts/**/*"].select { |f| !File.directory?(f) }
      files = swiftFiles + scriptFiles
      if Dir.exists?(dstDirPath)
         FileUtils.rm_r(dstDirPath)
      end
      files.each { |f|
         dstFilePath = f.gsub(srcDirPath, dstDirPath)
         dstFileDirPath = File.dirname(dstFilePath)
         FileUtils.mkdir_p(dstFileDirPath)
         FileUtils.cp(f, dstFileDirPath, :verbose => true)
      }
      vendorGroup.source_tree = "<group>"
      vendorGroup.path = "WL"
      project.save()
   else
      puts "! Environment variable if not found `AWL_LIB_SRC`. Skipping."
   end
end
